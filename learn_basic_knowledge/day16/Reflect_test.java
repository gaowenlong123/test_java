package day16;

/**
 *
 一 ：当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个类进行初始化。
 加载
 就是指将class文件读入内存，类的加载器并为之创建一个Class文件的对象（字节码对象）。
 任何类被使用时系统都会建立一个Class对象
 连接
 验证 是否有正确的内部结构，并和其他类协调一致
 准备 负责为类的静态成员分配内存，并设置默认初始化值
 解析 将类的二进制数据中的符号引用替换为直接引用
 初始化
 就是我们以前讲过的初始化步骤


 三 ：类初始化时机
 1. 创建类的实例
 2. 类的静态变量，或者为静态变量赋值
 3. 类的静态方法
 4. 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象
 5. 初始化某个类的子类
 6. 直接使用java.exe命令来运行某个主类


 三 ：类加载器
 负责将.class文件加载到内在中，并为之生成对应的Class对象。
 虽然我们不需要关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行


 四：反射  （场景：一个类的代码需要扩展，但是修改代码是困难的，就写一个新类，当系统运行时，new一个前置的类就可以随便调后者的类的方法和属性。）
 JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；
 对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。
 要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象。
 *
 * Created by Administrator on 2019\1\20 0020.
 */
public class Reflect_test {

    public static void main(String[] args) {

        //获取一个类的class文件对象 的三种方式
        //1：对象获取  2：类名获取  3：class类的静态方法获取

        //1:对象获取
        person p = new person();
        //调用父类Object的方法
        Class c = p.getClass();


        //2：类名调用  (每个类型，都会赋予一个静态属性，即class
        Class c1 = person.class;

        System.out.println(c==c1); //t   这两个就是一个对象
        System.out.println(c.equals(c1));//t


        //3：
        try {
            Class c2 =  Class.forName("day16.person");
        }catch (ClassNotFoundException ex){}


        // c c1 c2 都是一个对象
    }

}
