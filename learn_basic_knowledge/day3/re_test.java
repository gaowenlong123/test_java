package day3;

/**
 * 1：正则表达式
 *  字符类：[abc]
 含义：代表的是字符a、b 或 c
 例如：匹配规则为"[abc]" ，那么需要匹配的内容就是字符a，或者字符b，或字符c的一个

 字符类：[^abc]
 含义：代表的是除了 a、b 或 c以外的任何字符
 例如：匹配规则为"[^abc]"，那么需要匹配的内容就是不是字符a，或者不是字符b，或不是字符c的任意一个字符

 字符类：[a-zA-Z]
 含义：代表的是a 到 z 或 A 到 Z，两头的字母包括在内
 例如：匹配规则为"[a-zA-Z]"，那么需要匹配的是一个大写或者小写字母

 字符类：[0-9]
 含义：代表的是 0到9数字，两头的数字包括在内
 例如：匹配规则为"[0-9]"，那么需要匹配的是一个数字

 字符类：[a-zA-Z_0-9]
 含义：代表的字母或者数字或者下划线(即单词字符)
 例如：匹配规则为" [a-zA-Z_0-9] "，那么需要匹配的是一个字母或者是一个数字或一个下滑线
 *
 *
 *
 *预定义字符类：.
 含义：代表的是任何字符
 例如：匹配规则为" . "，那么需要匹配的是一个任意字符。如果，就想使用 . 的话，使用匹配规则"\\."来实现

 预定义字符类：\d
 含义：代表的是 0到9数字，两头的数字包括在内，相当于[0-9]
 例如：匹配规则为"\d "，那么需要匹配的是一个数字

 预定义字符类：\w
 含义：代表的字母或者数字或者下划线(即单词字符)，相当于[a-zA-Z_0-9]
 例如：匹配规则为"\w "，，那么需要匹配的是一个字母或者是一个数字或一个下滑线





 边界匹配器：^
 含义：代表的是行的开头
 例如：匹配规则为^[abc][0-9]$ ，那么需要匹配的内容从[abc]这个位置开始, 相当于左双引号

 边界匹配器：$
 含义：代表的是行的结尾
 例如：匹配规则为^[abc][0-9]$ ，那么需要匹配的内容以[0-9]这个结束, 相当于右双引号

 边界匹配器：\b
 含义：代表的是单词边界
 例如：匹配规则为"\b[abc]\b" ，那么代表的是字母a或b或c的左右两边需要的是非单词字符([a-zA-Z_0-9])

 数量词：X?
 含义：代表的是X出现一次或一次也没有
 例如：匹配规则为"a?"，那么需要匹配的内容是一个字符a，或者一个a都没有

 数量词：X*
 含义：代表的是X出现零次或多次
 例如：匹配规则为"a*" ，那么需要匹配的内容是多个字符a，或者一个a都没有

 数量词：X+
 含义：代表的是X出现一次或多次
 例如：匹配规则为"a+"，那么需要匹配的内容是多个字符a，或者一个a

 数量词：X{n}
 含义：代表的是X出现恰好 n 次
 例如：匹配规则为"a{5}"，那么需要匹配的内容是5个字符a

 数量词：X{n,}
 含义：代表的是X出现至少 n 次
 例如：匹配规则为"a{5, }"，那么需要匹配的内容是最少有5个字符a

 数量词：X{n,m}
 含义：代表的是X出现至少 n 次，但是不超过 m 次
 例如：匹配规则为"a{5,8}"，那么需要匹配的内容是有5个字符a 到 8个字符a之间

--------------------------------------------------------------------

 匹配正确的数字
 匹配规则：
 匹配正整数：”\\d+”
 匹配正小数：”\\d+\\.\\d+”
 匹配负整数：”-\\d+”
 匹配负小数：”-\\d+\\.\\d+”
 匹配保留两位小数的正数：”\\d+\\.\\d{2}”
 匹配保留1-3位小数的正数：”\\d+\\.\\d{1,3}”

 匹配合法的邮箱
 匹配规则：
 ”[a-zA-Z_0-9]+@[a-zA-Z_0-9]+(\\.[a-zA-Z_0-9]+)+”
 ”\\w+@\\w+(\\.\\w+)+”

 获取IP地址(192.168.1.100)中的每段数字
 匹配规则：
 ”\\.”

 * Created by Administrator on 2019\1\5 0005.
 */
public class re_test {

    public  static void checkQQ(){
        String QQ ="1233456";

        boolean b = QQ.matches("[1-9][\\d]{6,10}");
        boolean b1 = QQ.matches("[1-9][\\D]{6,10}");   // D 匹配不是数字
        System.out.print(b);
        System.out.print(b1);

    }

    public static void repelece(){
        String str1 ="aaaa1233456dddsss323dddd";
        String str2 ,str3;
        str2=str1.replaceAll("[\\d+]" ,"#");
        str3=str1.replaceAll("[\\d]+","#");   //看看区别
        System.out.println(str2);
        System.out.println(str3);
    }



    public static void test_split(){
        String str = "a-s-f-g-";
        String[] strArr = str.split("-");    //注意要是切点 .  需要加上 //.
        for(int i=0 ;i<strArr.length ;i++ ){
            System.out.print(strArr[i]);
        }


    }


    public static void main(String[] args) {

        checkQQ();
        test_split();
        repelece();
    }

}
